CREATE DATABASE educacion; 
/*ON PRIMARY
(
NAME = 'educacion_Data' ,
FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\educacion.mdf',
SIZE = 10MB,
MAXSIZE = 300MB,
FILEGROWTH = 10MB
)
LOG ON
(
NAME = 'educacion_Log' ,
FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\educacion.ldf',
SIZE = 5MB,
MAXSIZE = 100MB,
FILEGROWTH = 5MB
)*/
go
USE educacion;
go
DROP TABLE IF EXISTS detalle_docente_curso;
DROP TABLE IF EXISTS detalle_grupo_curso;
DROP TABLE IF EXISTS detalle_matricula;
DROP TABLE IF EXISTS detalle_matricula_pago;
DROP TABLE IF EXISTS pago;
DROP TABLE IF EXISTS grupo;
DROP TABLE IF EXISTS docente;
DROP TABLE IF EXISTS curso;
DROP TABLE IF EXISTS matricula;
DROP TABLE IF EXISTS alumno;
DROP TABLE IF EXISTS semestre;
DROP TABLE IF EXISTS carrera;
DROP TABLE IF EXISTS facultad;
DROP TABLE IF EXISTS campus;
DROP TABLE IF EXISTS sede;
DROP TABLE IF EXISTS distrito;
DROP TABLE IF EXISTS provincia;
DROP TABLE IF EXISTS departamento;

DROP PROCEDURE IF EXISTS InsertarDepartamento;
DROP PROCEDURE IF EXISTS ActualizarDepartamento;

DROP PROCEDURE IF EXISTS InsertarProvincia;
DROP PROCEDURE IF EXISTS ActualizarProvincia;

DROP PROCEDURE IF EXISTS InsertarDistrito;
DROP PROCEDURE IF EXISTS ActualizarDistrito;

DROP PROCEDURE IF EXISTS InsertarSede;
DROP PROCEDURE IF EXISTS ActualizarSede;

DROP PROCEDURE IF EXISTS InsertarCampus;
DROP PROCEDURE IF EXISTS ActualizarCampus;

DROP PROCEDURE IF EXISTS InsertarFacultad;
DROP PROCEDURE IF EXISTS ActualizarFacultad;

DROP PROCEDURE IF EXISTS InsertarCarrera;
DROP PROCEDURE IF EXISTS ActualizarCarrera;

DROP PROCEDURE IF EXISTS InsertarSemestre;
DROP PROCEDURE IF EXISTS ActualizarSemestre;

DROP PROCEDURE IF EXISTS InsertarAlumno;
DROP PROCEDURE IF EXISTS ActualizarAlumno;

DROP PROCEDURE IF EXISTS InsertarMatricula;
DROP PROCEDURE IF EXISTS ActualizarMatricula;

DROP PROCEDURE IF EXISTS InsertarPago;
DROP PROCEDURE IF EXISTS ActualizarPago;

DROP PROCEDURE IF EXISTS InsertarDetalleMatriculaPago;
DROP PROCEDURE IF EXISTS ActualizarDetalleMatriculaPago;

DROP PROCEDURE IF EXISTS InsertarGrupo;
DROP PROCEDURE IF EXISTS ActualizarGrupo;

DROP PROCEDURE IF EXISTS InsertarDetalleMatricula;
DROP PROCEDURE IF EXISTS ActualizarDetalleMatricula;

DROP PROCEDURE IF EXISTS InsertarCurso;
DROP PROCEDURE IF EXISTS ActualizarCurso;

DROP PROCEDURE IF EXISTS InsertarDetalleGrupoCurso; 

DROP PROCEDURE IF EXISTS InsertarDocente;
DROP PROCEDURE IF EXISTS ActualizarDocente;

DROP PROCEDURE IF EXISTS InsertarDetalleDocenteCurso; 
-------------------------------------------------------------------------------------------------------------------------

DROP PROCEDURE IF EXISTS ObtenerDepartamentoPorId;
DROP PROCEDURE IF EXISTS ObtenerProvinciaPorId;
DROP PROCEDURE IF EXISTS ObtenerDistritoPorId;
DROP PROCEDURE IF EXISTS ObtenerSedePorId;
DROP PROCEDURE IF EXISTS ObtenerCampusPorId;
DROP PROCEDURE IF EXISTS ObtenerFacultadPorId;
DROP PROCEDURE IF EXISTS ObtenerCarreraPorId;
DROP PROCEDURE IF EXISTS ObtenerSemestrePorId;
DROP PROCEDURE IF EXISTS ObtenerAlumnoPorId;
DROP PROCEDURE IF EXISTS ObtenerMatriculaPorId;
DROP PROCEDURE IF EXISTS ObtenerPagoPorId;
DROP PROCEDURE IF EXISTS ObtenerDetalleMatriculaPagoPorId;
DROP PROCEDURE IF EXISTS ObtenerGrupoPorId;
DROP PROCEDURE IF EXISTS ObtenerCursoPorId;
DROP PROCEDURE IF EXISTS ObtenerDocentePorId;

GO

DROP PROCEDURE IF EXISTS EliminarDepartamento;
DROP PROCEDURE IF EXISTS EliminarProvincia;
DROP PROCEDURE IF EXISTS EliminarDistrito;
DROP PROCEDURE IF EXISTS EliminarSede;
DROP PROCEDURE IF EXISTS EliminarCampus;
DROP PROCEDURE IF EXISTS EliminarFacultad;
DROP PROCEDURE IF EXISTS EliminarCarrera;
DROP PROCEDURE IF EXISTS EliminarAlumno;
DROP PROCEDURE IF EXISTS EliminarMatricula;
DROP PROCEDURE IF EXISTS EliminarPago;
DROP PROCEDURE IF EXISTS EliminarGrupo;
DROP PROCEDURE IF EXISTS EliminarCurso;
DROP PROCEDURE IF EXISTS EliminarDocente;


GO

DROP USER IF EXISTS JhonRamirez;
DROP USER IF EXISTS JuliaGarcia;
DROP USER IF EXISTS MateoSanchez;
DROP USER IF EXISTS Martínez;
DROP USER IF EXISTS RuizRomero;
DROP USER IF EXISTS GomezCruz;
DROP USER IF EXISTS FloresRodriguez;
DROP USER IF EXISTS GonzalezHernandez;
DROP USER IF EXISTS Lopez;
DROP USER IF EXISTS Quispe;
DROP USER IF EXISTS MartínezQuispe;
DROP USER IF EXISTS Ruiz;
DROP USER IF EXISTS Gomez;
DROP USER IF EXISTS Flores;
GO 
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'JhonRamirez') DROP LOGIN JhonRamirez;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'JuliaGarcia') DROP LOGIN JuliaGarcia;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'MateoSanchez') DROP LOGIN MateoSanchez;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'Martínez') DROP LOGIN Martínez;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'RuizRomero') DROP LOGIN RuizRomero;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'GomezCruz') DROP LOGIN GomezCruz;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'FloresRodriguez') DROP LOGIN FloresRodriguez;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'GonzalezHernandez') DROP LOGIN GonzalezHernandez;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'Lopez') DROP LOGIN Lopez;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'Quispe') DROP LOGIN Quispe;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'MartínezQuispe') DROP LOGIN MartínezQuispe;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'Ruiz') DROP LOGIN Ruiz;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'Gomez') DROP LOGIN Gomez;
IF EXISTS (SELECT 1 FROM sys.server_principals WHERE name = 'Flores') DROP LOGIN Flores;
GO


create table departamento (
	id_departamento int primary key identity(1,1),
	nombre nvarchar(50) not null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V'
);

create table provincia (
	id_provincia int primary key identity(1,1),
	nombre nvarchar(50) not null,
	id_departamento int not null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V',
	foreign key (id_departamento) references departamento(id_departamento)
);

create table distrito (
	id_distrito int primary key identity(1,1),
	nombre nvarchar(50) not null,
	id_provincia int not null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V',
	foreign key (id_provincia) references provincia(id_provincia)
);

create table sede (
	id_sede int primary key identity(1,1),
	nombre nvarchar(100) not null,
	direccion nvarchar(200) not null,
	id_distrito int not null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V',
	foreign key (id_distrito) references distrito(id_distrito)
);

create table campus (
	id_campus int primary key identity(1,1),
	nombre nvarchar(100) not null,
	id_sede int not null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V',
	foreign key (id_sede) references sede(id_sede)
);

create table facultad (
	id_facultad int primary key identity(1,1),
	nombre nvarchar(100) not null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V'
);

create table carrera (
	id_carrera int primary key identity(1,1),
	nombre nvarchar(100) not null,
	id_facultad int not null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V',
	foreign key (id_facultad) references facultad(id_facultad)
);

create table semestre (
	id_semestre int primary key identity(1,1),
	denominacion nvarchar(50) not null,
	fecha_inicio date not null,
	fecha_fin date not null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V'
);

create table alumno (
	id_alumno int primary key identity(1,1),
	nombre nvarchar(50) not null,
	apellido nvarchar(50) not null,
	dni char(8) not null,
	correo nvarchar(50) null,
	telefono nvarchar(9) null,
	id_distrito int not null,
	id_carrera int not null, 
	id_campus int not null,   
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V',
	foreign key (id_distrito) references distrito(id_distrito),
	foreign key (id_carrera) references carrera(id_carrera),
	foreign key (id_campus) references campus(id_campus)
);

create table matricula (
	id_matricula int primary key identity(1,1),
	fecha_matricula date not null,
	vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V',
	id_semestre int not null,
	id_distrito int not null,
	id_carrera int not null,
	id_campus int not null,
	id_alumno int not null,
	foreign key (id_semestre) references semestre(id_semestre),
	foreign key (id_distrito) references distrito(id_distrito),
	foreign key (id_carrera) references carrera(id_carrera),
	foreign key (id_campus) references campus(id_campus),
	foreign key (id_alumno) references alumno(id_alumno)
);

CREATE TABLE pago (
    id_pago  int identity (1,1) primary key, 
    monto  decimal(10, 2) not null,
    fecha_limite date not null,
    metodo_pago  nvarchar(30) not null CHECK (metodo_pago IN ('Tarjeta de débito', 'Tarjeta de crédito', 'Transferencia bancaria', 'Efectivo'))
);
  
CREATE TABLE detalle_matricula_pago (
    id_detalle INT primary key IDENTITY(1,1),
    id_matricula INT not null,
    id_pago INT not null,
    monto_pagado DECIMAL(10,2) not null,
    fecha_pago DATE not null,
    foreign key(id_matricula) REFERENCES matricula(id_matricula),
    foreign key(id_pago) REFERENCES pago(id_pago)
);


create table grupo (
	id_grupo int primary key identity(1,1),
	denominacion nvarchar(50),
	matriculados int not null CHECK (matriculados >= 0 and matriculados <= 40),
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V'
);

create table detalle_matricula (
	matricula_id int not null,
	grupo_id int not null,
	nota int null CHECK (nota >= 0 and nota <= 20),
	primary key(matricula_id, grupo_id),
	foreign key(grupo_id) references grupo(id_grupo),
	foreign key(matricula_id) references matricula(id_matricula)
);

create table curso (
	id_curso int primary key identity(1,1),
	nombre nvarchar(50) not null,
	descripcion nvarchar(100) null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V'
);

create table detalle_grupo_curso (
	id_grupo int not null,
	id_curso int not null,
	primary key (id_grupo, id_curso),
	foreign key(id_grupo) references grupo(id_grupo),
	foreign key(id_curso) references curso(id_curso)
);

create table docente (
	id_docente int primary key identity(1,1),
	nombre nvarchar(50) not null,
	apellido nvarchar(50) not null,
	dni char(8) not null,
	correo nvarchar(50) null,
	telefono nvarchar(9) null,
    vigencia char(1) not null CHECK (vigencia IN ('V', 'N')) DEFAULT 'V'
);

create table detalle_docente_curso (
	id_docente int not null,
	id_curso int not null,
	primary key(id_docente, id_curso),
	foreign key (id_docente) references docente(id_docente),
	foreign key (id_curso) references curso(id_curso)
);

----------------------------------------------------------------------------------------

INSERT INTO departamento (nombre) 
VALUES 
    ('Amazonas'), ('Áncash'), ('Apurímac'), ('Arequipa'), ('Ayacucho'), 
    ('Cajamarca'), ('Callao'), ('Cusco'), ('Huancavelica'), ('Huánuco'),
    ('Ica'), ('Junín'), ('La Libertad'), ('Lambayeque'), ('Lima'),
    ('Loreto'), ('Madre de Dios'), ('Moquegua'), ('Pasco'), ('Piura');




INSERT INTO provincia (nombre, id_departamento) 
VALUES 
    ('Chachapoyas', 1), ('Huaraz', 2), ('Abancay', 3), ('Arequipa', 4), ('Huamanga', 5),
    ('Cajamarca', 6), ('Callao', 7), ('Cusco', 8), ('Huancavelica', 9), ('Huánuco', 10),
    ('Ica', 11), ('Huancayo', 12), ('Trujillo', 13), ('Chiclayo', 14), ('Huaral', 15),
    ('Maynas', 16), ('Tambopata', 17), ('Mariscal Nieto', 18), ('Pasco', 19), ('Sullana', 20);




INSERT INTO distrito (nombre, id_provincia) 
VALUES 
    ('Levanto', 1), ('Independencia', 2), ('Curahuasi', 3), ('Yanahuara', 4), ('San Juan Bautista', 5),
    ('Baños del Inca', 6), ('Bellavista', 7), ('San Sebastián', 8), ('Acobamba', 9), ('Pillco Marca', 10),
    ('Parcona', 11), ('El Tambo', 12), ('La Esperanza', 13), ('José Leonardo Ortiz', 14), ('Chancay', 15),
    ('Punchana', 16), ('Laberinto', 17), ('Torata', 18), ('Yanacancha', 19), ('Bellavista', 20);





INSERT INTO sede (nombre, direccion, id_distrito) 
VALUES 
    ('Sede Amazonas', 'Av. Chachapoyas 123', 1), ('Sede Ancash', 'Jr. Huaraz 456', 2), 
    ('Sede Apurímac', 'Calle Curahuasi 789', 3), ('Sede Arequipa', 'Av. Yanahuara 321', 4),
    ('Sede Ayacucho', 'Jr. San Juan 147', 5), ('Sede Cajamarca', 'Av. Baños del Inca 234', 6),
    ('Sede Callao', 'Plaza Bellavista 555', 7), ('Sede Cusco', 'Jr. San Sebastián 333', 8),
    ('Sede Huancavelica', 'Calle Acobamba 222', 9), ('Sede Huánuco', 'Av. Pillco Marca 999', 10),
    ('Sede Ica', 'Jr. Parcona 888', 11), ('Sede Junín', 'Av. El Tambo 777', 12),
    ('Sede La Libertad', 'Jr. La Esperanza 666', 13), ('Sede Lambayeque', 'Calle Ortiz 555', 14),
    ('Sede Lima', 'Av. Chancay 444', 15), ('Sede Loreto', 'Av. Punchana 333', 16),
    ('Sede Madre de Dios', 'Jr. Laberinto 222', 17), ('Sede Moquegua', 'Jr. Torata 111', 18),
    ('Sede Pasco', 'Av. Yanacancha 101', 19), ('Sede Piura', 'Av. Bellavista 202', 20);





INSERT INTO campus (nombre, id_sede) 
VALUES 
    ('Campus 1', 1), ('Campus 2', 2), ('Campus 3', 3), ('Campus 4', 4), ('Campus 5', 5),
    ('Campus 6', 6), ('Campus 7', 7), ('Campus 8', 8), ('Campus 9', 9), ('Campus 10', 10),
    ('Campus 11', 11), ('Campus 12', 12), ('Campus 13', 13), ('Campus 14', 14), ('Campus 15', 15),
    ('Campus 16', 16), ('Campus 17', 17), ('Campus 18', 18), ('Campus 19', 19), ('Campus 20', 20);





INSERT INTO facultad (nombre) 
VALUES 
    ('Ingeniería'), ('Medicina'), ('Derecho'), ('Administración'), ('Economía'),
    ('Arquitectura'), ('Psicología'), ('Educación'), ('Comunicación'), ('Ciencias Sociales'),
    ('Veterinaria'), ('Arte'), ('Filosofía'), ('Matemáticas'), ('Física'),
    ('Biología'), ('Química'), ('Deportes'), ('Música'), ('Idiomas');





INSERT INTO carrera (nombre, id_facultad) 
VALUES 
    ('Ingeniería Civil', 1), ('Medicina Humana', 2), ('Derecho Penal', 3), ('Administración de Empresas', 4), ('Economía y Finanzas', 5),
    ('Arquitectura y Urbanismo', 6), ('Psicología Clínica', 7), ('Educación Primaria', 8), ('Periodismo', 9), ('Trabajo Social', 10),
    ('Veterinaria', 11), ('Bellas Artes', 12), ('Filosofía y Letras', 13), ('Matemáticas Aplicadas', 14), ('Física Nuclear', 15),
    ('Biotecnología', 16), ('Química Industrial', 17), ('Entrenamiento Deportivo', 18), ('Música Clásica', 19), ('Traducción e Interpretación', 20);




INSERT INTO semestre (denominacion, fecha_inicio, fecha_fin) 
VALUES 
    ('2023-I',  '2023-03-01', '2023-07-15'), 
	('2023-II', '2023-08-01', '2023-12-15'), 
    ('2024-I',  '2024-03-01', '2024-07-15'), 
	('2024-II', '2024-08-01', '2024-12-15'),
    ('2025-I',  '2025-03-01', '2025-07-15'), 
	('2025-II', '2025-08-01', '2025-12-15'),
    ('2026-I',  '2026-03-01', '2026-07-15'), 
	('2026-II', '2026-08-01', '2026-12-15'),
    ('2027-I',  '2027-03-01', '2027-07-15'), 
	('2027-II', '2027-08-01', '2027-12-15'),
    ('2028-I',  '2028-03-01', '2028-07-15'), 
	('2028-II', '2028-08-01', '2028-12-15'),
    ('2029-I',  '2029-03-01', '2029-07-15'), 
	('2029-II', '2029-08-01', '2029-12-15'),
    ('2030-I',  '2030-03-01', '2030-07-15'), 
	('2030-II', '2030-08-01', '2030-12-15'),
    ('2031-I',  '2031-03-01', '2031-07-15'), 
	('2031-II', '2031-08-01', '2031-12-15'),
    ('2032-I',  '2032-03-01', '2032-07-15'),
	('2032-II', '2032-08-01', '2032-12-15');
 
INSERT INTO alumno (nombre, apellido, dni, correo, telefono, id_distrito, id_carrera, id_campus)
VALUES 
('Juan', 'Perez', '12345678', 'juan.perez@email.com', '987654321', 1, 1, 1),
('Maria', 'Lopez', '87654321', 'maria.lopez@email.com', '987654322', 2, 2, 2),
('Carlos', 'Gomez', '11223344', 'carlos.gomez@email.com', '987654323', 3, 3, 3),
('Ana', 'Diaz', '22334455', 'ana.diaz@email.com', '987654324', 4, 4, 4),
('Pedro', 'Torres', '33445566', 'pedro.torres@email.com', '987654325', 5, 5, 5),
('Luis', 'Martinez', '44556677', 'luis.martinez@email.com', '987654326', 6, 6, 6),
('Sofia', 'Ramirez', '55667788', 'sofia.ramirez@email.com', '987654327', 7, 7, 7),
('Diego', 'Fernandez', '66778899', 'diego.fernandez@email.com', '987654328', 8, 8, 8),
('Lucia', 'Alvarez', '77889900', 'lucia.alvarez@email.com', '987654329', 9, 9, 9),
('Jorge', 'Castro', '88990011', 'jorge.castro@email.com', '987654330', 10, 10, 10),
('Carmen', 'Reyes', '99001122', 'carmen.reyes@email.com', '987654331', 11, 11, 11),
('Ricardo', 'Silva', '00112233', 'ricardo.silva@email.com', '987654332', 12, 12, 12),
('Gabriela', 'Mendoza', '11223344', 'gabriela.mendoza@email.com', '987654333', 13, 13, 13),
('Oscar', 'Salazar', '22334455', 'oscar.salazar@email.com', '987654334', 14, 14, 14),
('Valeria', 'Morales', '33445566', 'valeria.morales@email.com', '987654335', 15, 15, 15),
('Roberto', 'Chavez', '44556677', 'roberto.chavez@email.com', '987654336', 16, 16, 16),
('Elena', 'Vega', '55667788', 'elena.vega@email.com', '987654337', 17, 17, 17),
('Fernando', 'Ortega', '66778899', 'fernando.ortega@email.com', '987654338', 18, 18, 18),
('Patricia', 'Rojas', '77889900', 'patricia.rojas@email.com', '987654339', 19, 19, 19),
('Hugo', 'Paredes', '88990011', 'hugo.paredes@email.com', '987654340', 20, 20, 20);
 
INSERT INTO matricula (fecha_matricula ,vigencia, id_semestre,id_distrito, id_carrera, id_campus,id_alumno )
VALUES 
('2023-02-27', 'V', 1,  1,   1,  1,  1), 
('2023-07-26', 'V', 2,  2,   4,  2,  2), 
('2024-03-25', 'N', 3,  3,   6,  3,  3), 
('2024-07-29', 'V', 4,  4,   9,  4,  4), 
('2025-02-28', 'V', 5,  5,   20, 5,  5), 
('2025-07-29', 'V', 6,  6,   3,  6,  6), 
('2026-02-26', 'N', 7,  7,   19, 7,  7), 
('2026-07-24', 'V', 8,  8,   17, 8,  8), 
('2027-02-28', 'V', 9,  9,   9,  9,  9), 
('2027-07-20', 'V', 10, 10,  16, 10, 10),
('2028-02-21', 'V', 11, 11,  20, 11, 11),
('2028-07-22', 'N', 12, 12,  1,  12, 12),
('2029-02-25', 'V', 13, 13,  5,  13, 13),
('2029-07-26', 'V', 14, 14,  4,  14, 14),
('2030-02-22', 'N', 15, 15,  11, 15, 15),
('2030-07-25', 'V', 16, 16,  1,  16, 16),
('2031-02-25', 'V', 17, 17,  19, 17, 17),
('2031-07-27', 'N', 18, 18,  20, 18, 18),
('2032-02-25', 'V', 19, 19,  6,  19, 19),
('2032-07-22', 'V', 20, 20,  10, 20, 20);
 
INSERT INTO grupo (denominacion, matriculados)
VALUES 
('Grupo A', 30),
('Grupo B', 28),
('Grupo C', 32),
('Grupo D', 27),
('Grupo E', 35),
('Grupo F', 29),
('Grupo G', 31),
('Grupo H', 33),
('Grupo I', 26),
('Grupo J', 34),
('Grupo K', 25),
('Grupo L', 36),
('Grupo M', 23),
('Grupo N', 30),
('Grupo O', 32),
('Grupo P', 28),
('Grupo Q', 33),
('Grupo R', 29),
('Grupo S', 31),
('Grupo T', 27);


INSERT INTO detalle_matricula (matricula_id, grupo_id, nota)
VALUES
(1, 1, 20),
(2, 2, 18),
(3, 3, 14),
(4, 4, 16),
(5, 5, 14),
(6, 6, 19),
(7, 7, 10),
(8, 8, 17),
(9, 9, 13),
(10, 10, 18),
(11, 11, 11),
(12, 12, 15),
(13, 13, 14),
(14, 14, 9),
(15, 15, 16),
(16, 16, 13),
(17, 17, 15),
(18, 18, 12),
(19, 19, 7),
(20, 20, 5);

 

INSERT INTO curso (nombre, descripcion)
VALUES 
('Matemáticas', 'Cálculo diferencial e integral'),
('Física', 'Conceptos básicos de mecánica'),
('Química', 'Reacciones y compuestos'),
('Historia', 'Historia mundial'),
('Lengua', 'Gramática y redacción'),
('Programación', 'Fundamentos de programación en C++'),
('Bases de Datos', 'Diseño y administración de bases de datos'),
('Redes', 'Conceptos de redes y protocolos'),
('Sistemas Operativos', 'Administración y uso de sistemas operativos'),
('Estructuras de Datos', 'Árboles, listas y grafos'),
('Administración', 'Gestión empresarial'),
('Contabilidad', 'Estados financieros'),
('Psicología', 'Introducción a la psicología'),
('Marketing', 'Estrategias de mercado'),
('Economía', 'Macroeconomía y microeconomía'),
('Diseño Gráfico', 'Herramientas y técnicas de diseño'),
('Derecho', 'Introducción al derecho civil'),
('Arquitectura', 'Fundamentos de arquitectura'),
('Música', 'Historia y teoría musical'),
('Biología', 'Estructura celular y genética');

INSERT INTO docente (nombre, apellido, dni, correo, telefono)  
VALUES  
('Carlos', 'García', '16987478', 'carlos_garcia@gmail.com', '987234321'),  
('María', 'López', '87654321', 'maria_lopez@gmail.com', '997873222'),  
('Javier', 'Fernández', '85634792', 'javier_fernandez@gmail.com', '99816533'),  
('Carla', 'Martínez', '98232481', 'carla_martinez@gmail.com', '909720324'),  
('Pedro', 'Torres', '16257298', 'pedro_torres@gmail.com', '901983287'),  
('Sofía', 'Ramírez', '93871294', 'sofia_ramirez@gmail.com', '923452356'),  
('Luis', 'Ortega', '16139183', 'luis_ortega@gmail.com', '958268451'),  
('Gabriela', 'Silva', '62346649', 'gabriela_silva@gmail.com', '975252342'),  
('Diego', 'Castro', '76489823', 'diego_castro@gmail.com', '973456345'),  
('Patricia', 'Rojas', '88990011', 'patricia_rojas@gmail.com', '934634556'),  
('Hugo', 'Mendoza', '90319422', 'hugo_mendoza@gmail.com', '947822102'),  
('Carolina', 'Chávez', '81223832', 'carolina_chavez@gmail.com', '987235645'),  
('Fernando', 'Vega', '13194343', 'fernando_vega@gmail.com', '987125978'),  
('Valeria', 'Morales', '22334455', 'valeria_morales@gmail.com', '951298423'),  
('Ricardo', 'Salazar', '33445566', 'ricardo_salazar@gmail.com', '998374872'),  
('Elena', 'Alvarez', '18738383', 'elena_alvarez@gmail.com', '989354246'),  
('Roberto', 'Paredes', '57241722', 'roberto_paredes@gmail.com', '983487337'),  
('Lucía', 'Gómez', '22317812', 'lucia_gomez@gmail.com', '934290338'),  
('Oscar', 'Díaz', '91842340', 'oscar_diaz@gmail.com', '902973433'),  
('Carmen', 'Reyes', '94223223', 'carmen_reyes@gmail.com', '923423420');  


INSERT INTO detalle_grupo_curso (id_grupo, id_curso)  
VALUES  
(1, 1), 
(2, 2), 
(3, 3), 
(4, 4), 
(5, 5),  
(6, 6), 
(7, 7), 
(8, 8), 
(9, 9), 
(10, 10),  
(11, 11), 
(12, 12), 
(13, 13), 
(14, 14), 
(15, 15),  
(16, 16), 
(17, 17), 
(18, 18), 
(19, 19), 
(20, 20);  
 
INSERT INTO detalle_docente_curso (id_docente, id_curso) 
VALUES
(1, 1), 
(2, 2), 
(3, 3), 
(4, 4), 
(5, 5),  
(6, 6), 
(7, 7), 
(8, 8), 
(9, 9), 
(10, 10),  
(11, 11), 
(12, 12), 
(13, 13), 
(14, 14), 
(15, 15),  
(16, 16), 
(17, 17), 
(18, 18), 
(19, 19), 
(20, 20); 

INSERT INTO pago ( monto, fecha_limite, metodo_pago) VALUES
(3000.00, '2032-07-22', 'Tarjeta de débito'),
(1850.00,   '2023-03-01', 'Tarjeta de crédito'),
(1600.00,  '2023-08-01', 'Transferencia bancaria'),
(1750.50,  '2024-03-01', 'Efectivo'),
(1900.00,  '2024-08-01', 'Tarjeta de débito'),
(1550.00,   '2025-03-01', 'Tarjeta de crédito'),
(2250.50,   '2025-08-01', 'Efectivo'),
(1800.00,   '2026-03-01', 'Tarjeta de crédito'),
(2000.00,   '2026-08-01', 'Transferencia bancaria'),
(2050.00,  '2027-03-01', 'Tarjeta de débito'),
(1850.50,  '2027-08-01', 'Tarjeta de crédito'),
(1950.50,  '2028-03-01', 'Efectivo'),
(1750.00,  '2028-08-01', 'Tarjeta de crédito'),
(1050.00,  '2029-03-01', 'Transferencia bancaria'),
(1800.00, '2029-08-01', 'Efectivo'),
(1500.00, '2030-03-01', 'Tarjeta de débito'),
(2500.50, '2030-08-01', 'Tarjeta de crédito'),
(2600.00, '2031-03-01', 'Tarjeta de crédito'),
(1500.50, '2031-08-01', 'Transferencia bancaria'),
(1900.50, '2032-03-01', 'Efectivo');


INSERT INTO detalle_matricula_pago (id_matricula, id_pago, monto_pagado, fecha_pago) VALUES
(1,  1,  3000.00,   '2023-02-27'),
(2,  2,  1850.00,   '2023-07-26'),
(3,  3,  1600.00,   '2024-03-25'),
(4,  4,  1750.50,   '2024-07-29'),
(5,  5,  1900.00,   '2025-02-28'),
(6,  6,  1550.00,   '2025-07-29'),
(7,  7,  2250.50,   '2026-02-26'),
(8,  8,  1800.00,   '2026-07-24'),
(9,  9,  2000.00,   '2027-02-28'),
(10, 10, 2050.00, '2027-07-20'),
(11, 11, 1850.50, '2028-02-21'),
(12, 12, 1950.50, '2028-07-22'),
(13, 13, 1750.00, '2029-02-25'),
(14, 14, 1050.00, '2029-07-26'),
(15, 15, 1800.00, '2030-02-22'),
(16, 16, 1500.00, '2030-07-25'),
(17, 17, 2500.50, '2031-02-25'),
(18, 18, 2600.00, '2031-07-27'),
(19, 19, 1500.50, '2032-02-25'),
(20, 20, 1900.50, '2032-07-22');

-------------------------------------------------------------------------------------------------------------------------


-- Procedimientos almacenados

-- Departamento
GO
CREATE PROCEDURE InsertarDepartamento
    @Nombre NVARCHAR(50)
AS
BEGIN
    INSERT INTO departamento (nombre) VALUES (@Nombre);
END;
GO

CREATE PROCEDURE ActualizarDepartamento
    @IdDepartamento INT,
    @Nombre NVARCHAR(50)
AS
BEGIN
    UPDATE departamento 
    SET nombre = @Nombre 
    WHERE id_departamento = @IdDepartamento;
END;
GO


CREATE PROCEDURE EliminarDepartamento
    @IdDepartamento INT
AS
BEGIN  
    UPDATE departamento SET vigencia = 'N' WHERE id_departamento = @IdDepartamento;
 
    UPDATE provincia SET vigencia = 'N' WHERE id_departamento = @IdDepartamento;
 
    UPDATE distrito 
    SET vigencia = 'N' 
    WHERE id_provincia IN (SELECT id_provincia FROM provincia WHERE id_departamento = @IdDepartamento);
 
    UPDATE sede 
    SET vigencia = 'N' 
    WHERE id_distrito IN (SELECT id_distrito FROM distrito WHERE id_provincia IN 
                         (SELECT id_provincia FROM provincia WHERE id_departamento = @IdDepartamento));
 
    UPDATE campus 
    SET vigencia = 'N' 
    WHERE id_sede IN (SELECT id_sede FROM sede WHERE id_distrito IN 
                     (SELECT id_distrito FROM distrito WHERE id_provincia IN 
                      (SELECT id_provincia FROM provincia WHERE id_departamento = @IdDepartamento)));
 
    UPDATE alumno 
    SET vigencia = 'N' 
    WHERE id_campus IN (SELECT id_campus FROM campus WHERE id_sede IN 
                        (SELECT id_sede FROM sede WHERE id_distrito IN 
                         (SELECT id_distrito FROM distrito WHERE id_provincia IN 
                          (SELECT id_provincia FROM provincia WHERE id_departamento = @IdDepartamento))));
 
    UPDATE matricula 
    SET vigencia = 'N' 
    WHERE id_alumno IN (SELECT id_alumno FROM alumno WHERE id_campus IN 
                        (SELECT id_campus FROM campus WHERE id_sede IN 
                         (SELECT id_sede FROM sede WHERE id_distrito IN 
                          (SELECT id_distrito FROM distrito WHERE id_provincia IN 
                           (SELECT id_provincia FROM provincia WHERE id_departamento = @IdDepartamento)))));

END;
GO 


CREATE PROCEDURE ObtenerDepartamentoPorId
    @IdDepartamento INT
AS
BEGIN
    SELECT * FROM departamento WHERE id_departamento = @IdDepartamento;
END;
GO

-- Provincia
CREATE PROCEDURE InsertarProvincia
    @Nombre NVARCHAR(50),
    @IdDepartamento INT
AS
BEGIN
    INSERT INTO provincia (nombre, id_departamento) VALUES (@Nombre, @IdDepartamento);
END;
GO

CREATE PROCEDURE ActualizarProvincia
    @IdProvincia INT,
    @Nombre NVARCHAR(50),
    @IdDepartamento INT
AS
BEGIN
    UPDATE provincia 
    SET nombre = @Nombre, id_departamento = @IdDepartamento
    WHERE id_provincia = @IdProvincia;
END;
GO


CREATE PROCEDURE EliminarProvincia
    @IdProvincia INT
AS
BEGIN 
    UPDATE provincia SET vigencia = 'N' WHERE id_provincia = @IdProvincia;
 
    UPDATE distrito 
    SET vigencia = 'N' 
    WHERE id_provincia = @IdProvincia;
 
    UPDATE sede 
    SET vigencia = 'N' 
    WHERE id_distrito IN (SELECT id_distrito FROM distrito WHERE id_provincia = @IdProvincia);
 
    UPDATE campus 
    SET vigencia = 'N' 
    WHERE id_sede IN (SELECT id_sede FROM sede WHERE id_distrito IN 
                     (SELECT id_distrito FROM distrito WHERE id_provincia = @IdProvincia)); 

    UPDATE alumno 
    SET vigencia = 'N' 
    WHERE id_campus IN (SELECT id_campus FROM campus WHERE id_sede IN 
                        (SELECT id_sede FROM sede WHERE id_distrito IN 
                         (SELECT id_distrito FROM distrito WHERE id_provincia = @IdProvincia)));
 
    UPDATE matricula 
    SET vigencia = 'N' 
    WHERE id_alumno IN (SELECT id_alumno FROM alumno WHERE id_campus IN 
                        (SELECT id_campus FROM campus WHERE id_sede IN 
                         (SELECT id_sede FROM sede WHERE id_distrito IN 
                          (SELECT id_distrito FROM distrito WHERE id_provincia = @IdProvincia))));

END;
GO

CREATE PROCEDURE ObtenerProvinciaPorId
    @IdProvincia INT
AS
BEGIN
    SELECT * FROM provincia WHERE id_provincia = @IdProvincia;
END;
GO


-- Distrito
CREATE PROCEDURE InsertarDistrito
    @Nombre NVARCHAR(50),
    @IdProvincia INT
AS
BEGIN
    INSERT INTO distrito (nombre, id_provincia) VALUES (@Nombre, @IdProvincia);
END;
GO

CREATE PROCEDURE ActualizarDistrito
    @IdDistrito INT,
    @Nombre NVARCHAR(50),
    @IdProvincia INT
AS
BEGIN
    UPDATE distrito 
    SET nombre = @Nombre, id_provincia = @IdProvincia
    WHERE id_distrito = @IdDistrito;
END;
GO

 
CREATE PROCEDURE EliminarDistrito
    @IdDistrito INT
AS
BEGIN 
    UPDATE distrito SET vigencia = 'N' WHERE id_distrito = @IdDistrito;
 
    UPDATE sede 
    SET vigencia = 'N' 
    WHERE id_distrito = @IdDistrito;
 
    UPDATE campus 
    SET vigencia = 'N' 
    WHERE id_sede IN (SELECT id_sede FROM sede WHERE id_distrito = @IdDistrito);
 
    UPDATE alumno 
    SET vigencia = 'N' 
    WHERE id_campus IN (SELECT id_campus FROM campus WHERE id_sede IN 
                        (SELECT id_sede FROM sede WHERE id_distrito = @IdDistrito));
 
    UPDATE matricula 
    SET vigencia = 'N' 
    WHERE id_alumno IN (SELECT id_alumno FROM alumno WHERE id_campus IN 
                        (SELECT id_campus FROM campus WHERE id_sede IN 
                         (SELECT id_sede FROM sede WHERE id_distrito = @IdDistrito)));
END;
GO 

CREATE PROCEDURE ObtenerDistritoPorId
    @IdDistrito INT
AS
BEGIN
    SELECT * FROM distrito WHERE id_distrito = @IdDistrito;
END;
GO
 

-- Sede
CREATE PROCEDURE InsertarSede
    @Nombre NVARCHAR(100),
    @Direccion NVARCHAR(200),
    @IdDistrito INT
AS
BEGIN
    INSERT INTO sede (nombre, direccion, id_distrito) VALUES (@Nombre, @Direccion, @IdDistrito);
END;
GO

CREATE PROCEDURE ActualizarSede
    @IdSede INT,
    @Nombre NVARCHAR(100),
    @Direccion NVARCHAR(200),
    @IdDistrito INT
AS
BEGIN
    UPDATE sede 
    SET nombre = @Nombre, direccion = @Direccion, id_distrito = @IdDistrito
    WHERE id_sede = @IdSede;
END;
GO


CREATE PROCEDURE EliminarSede
    @IdSede INT
AS
BEGIN 
    UPDATE sede SET vigencia = 'N' WHERE id_sede = @IdSede;
 
    UPDATE campus 
    SET vigencia = 'N' 
    WHERE id_sede = @IdSede;
 
    UPDATE alumno 
    SET vigencia = 'N' 
    WHERE id_campus IN (SELECT id_campus FROM campus WHERE id_sede = @IdSede);
 
    UPDATE matricula 
    SET vigencia = 'N' 
    WHERE id_alumno IN (SELECT id_alumno FROM alumno WHERE id_campus IN 
                        (SELECT id_campus FROM campus WHERE id_sede = @IdSede));
END;
GO 

CREATE PROCEDURE ObtenerSedePorId
    @IdSede INT
AS
BEGIN
    SELECT * FROM sede WHERE id_sede = @IdSede;
END;
GO

-- Campus
CREATE PROCEDURE InsertarCampus
    @Nombre NVARCHAR(100),
    @IdSede INT
AS
BEGIN
    INSERT INTO campus (nombre, id_sede) VALUES (@Nombre, @IdSede);
END;
GO

CREATE PROCEDURE ActualizarCampus
    @id_campus INT,
    @Nombre NVARCHAR(100),
    @IdSede INT
AS
BEGIN
    UPDATE campus 
    SET nombre = @Nombre, id_sede = @IdSede
    WHERE id_campus = @id_campus;
END;
GO

CREATE PROCEDURE EliminarCampus
    @id_campus INT
AS
BEGIN 
    UPDATE campus SET vigencia = 'N' WHERE id_campus = @id_campus;
 
    UPDATE alumno 
    SET vigencia = 'N' 
    WHERE id_campus = @id_campus;
 
    UPDATE matricula 
    SET vigencia = 'N' 
    WHERE id_alumno IN (SELECT id_alumno FROM alumno WHERE id_campus = @id_campus);
END;
GO 

CREATE PROCEDURE ObtenerCampusPorId
    @id_campus INT
AS
BEGIN
    SELECT * FROM campus WHERE id_campus = @id_campus;
END;
GO
  

-- Facultad
CREATE PROCEDURE InsertarFacultad
    @Nombre NVARCHAR(100)
AS
BEGIN
    INSERT INTO facultad (nombre) VALUES (@Nombre);
END;
GO

CREATE PROCEDURE ActualizarFacultad
    @IdFacultad INT,
    @Nombre NVARCHAR(100)
AS
BEGIN
    UPDATE facultad 
    SET nombre = @Nombre 
    WHERE id_facultad = @IdFacultad;
END;
GO
 
CREATE PROCEDURE EliminarFacultad
    @IdFacultad INT
AS
BEGIN 
    UPDATE facultad SET vigencia = 'N' WHERE id_facultad = @IdFacultad;
 
    UPDATE carrera 
    SET vigencia = 'N' 
    WHERE id_facultad = @IdFacultad;
 
    UPDATE alumno 
    SET vigencia = 'N' 
    WHERE id_carrera IN (SELECT id_carrera FROM carrera WHERE id_facultad = @IdFacultad);
 
    UPDATE matricula 
    SET vigencia = 'N' 
    WHERE id_alumno IN (SELECT id_alumno FROM alumno WHERE id_carrera IN 
                        (SELECT id_carrera FROM carrera WHERE id_facultad = @IdFacultad));

END;
GO
  
CREATE PROCEDURE ObtenerFacultadPorId
    @IdFacultad INT
AS
BEGIN
    SELECT * FROM facultad WHERE id_facultad = @IdFacultad;
END;
GO

-- Carrera
CREATE PROCEDURE InsertarCarrera
    @Nombre NVARCHAR(100),
    @IdFacultad INT
AS
BEGIN
    INSERT INTO carrera (nombre, id_facultad) VALUES (@Nombre, @IdFacultad);
END;
GO

CREATE PROCEDURE ActualizarCarrera
    @IdCarrera INT,
    @Nombre NVARCHAR(100),
    @IdFacultad INT
AS
BEGIN
    UPDATE carrera 
    SET nombre = @Nombre, id_facultad = @IdFacultad
    WHERE id_carrera = @IdCarrera;
END;
GO

CREATE PROCEDURE EliminarCarrera
    @IdCarrera INT
AS
BEGIN 
    UPDATE matricula
    SET vigencia = 'N'
    WHERE id_carrera = @IdCarrera; 

    UPDATE carrera SET vigencia = 'N' WHERE id_carrera = @IdCarrera;
 
    UPDATE alumno 
    SET vigencia = 'N' 
    WHERE id_carrera = @IdCarrera;
 
    UPDATE matricula 
    SET vigencia = 'N' 
    WHERE id_alumno IN (SELECT id_alumno FROM alumno WHERE id_carrera = @IdCarrera);
END;
GO

CREATE PROCEDURE ObtenerCarreraPorId
    @IdCarrera INT
AS
BEGIN
    SELECT * FROM carrera WHERE id_carrera = @IdCarrera;
END;
GO

-- Semestre
CREATE PROCEDURE InsertarSemestre
    @Denominacion NVARCHAR(50),
    @FechaInicio DATE,
    @FechaFin DATE
AS
BEGIN
    INSERT INTO semestre (denominacion, fecha_inicio, fecha_fin)
    VALUES (@Denominacion, @FechaInicio, @FechaFin);
END;
GO

CREATE PROCEDURE ActualizarSemestre
    @IdSemestre INT,
    @Denominacion NVARCHAR(50),
    @FechaInicio DATE,
    @FechaFin DATE
AS
BEGIN
    UPDATE semestre 
    SET denominacion = @Denominacion, fecha_inicio = @FechaInicio, fecha_fin = @FechaFin
    WHERE id_semestre = @IdSemestre;
END;
GO

CREATE PROCEDURE ObtenerSemestrePorId
    @IdSemestre INT
AS
BEGIN
    SELECT * FROM semestre WHERE id_semestre = @IdSemestre;
END;
GO 

-- Alumno
CREATE PROCEDURE InsertarAlumno
    @Nombre NVARCHAR(50),
    @Apellido NVARCHAR(50),
    @DNI CHAR(8),
    @Correo NVARCHAR(50),
    @Telefono NVARCHAR(9),
    @IdDistrito INT,
    @IdCarrera INT,
    @id_campus INT
AS
BEGIN
    INSERT INTO alumno (nombre, apellido, dni, correo, telefono, id_distrito, id_carrera, id_campus)
    VALUES (@Nombre, @Apellido, @DNI, @Correo, @Telefono, @IdDistrito, @IdCarrera, @id_campus);
END;
GO

CREATE PROCEDURE ActualizarAlumno
    @IdAlumno INT,
    @Nombre NVARCHAR(50),
    @Apellido NVARCHAR(50),
    @DNI CHAR(8),
    @Correo NVARCHAR(50),
    @Telefono NVARCHAR(9),
    @IdDistrito INT,
    @IdCarrera INT,
    @id_campus INT
AS
BEGIN
    UPDATE alumno
    SET nombre = @Nombre, apellido = @Apellido, dni = @DNI, correo = @Correo, telefono = @Telefono,
        id_distrito = @IdDistrito, id_carrera = @IdCarrera, id_campus = @id_campus
    WHERE id_alumno = @IdAlumno;
END;
GO

CREATE PROCEDURE EliminarAlumno
    @IdAlumno INT
AS
BEGIN 
    UPDATE alumno SET vigencia = 'N' WHERE id_alumno = @IdAlumno;
 
    UPDATE matricula SET vigencia = 'N' WHERE id_alumno = @IdAlumno;
END;
GO

CREATE PROCEDURE ObtenerAlumnoPorId
    @IdAlumno INT
AS
BEGIN
    SELECT * FROM alumno WHERE id_alumno = @IdAlumno;
END;
GO
-- Matricula
CREATE PROCEDURE InsertarMatricula
    @FechaMatricula DATE,
    @Vigencia CHAR(1),
    @IdSemestre INT,
    @IdDistrito INT,
    @IdCarrera INT,
    @id_campus INT,
    @IdAlumno INT
AS
BEGIN
    INSERT INTO matricula (fecha_matricula, vigencia, id_semestre, id_distrito, id_carrera, id_campus, id_alumno)
    VALUES (@FechaMatricula, @Vigencia, @IdSemestre, @IdDistrito, @IdCarrera, @id_campus, @IdAlumno);
END;
GO

CREATE PROCEDURE ActualizarMatricula
    @IdMatricula INT,
    @FechaMatricula DATE,
    @Vigencia CHAR(1),
    @IdSemestre INT,
    @IdDistrito INT,
    @IdCarrera INT,
    @id_campus INT,
    @IdAlumno INT
AS
BEGIN
    UPDATE matricula
    SET fecha_matricula = @FechaMatricula, vigencia = @Vigencia, id_semestre = @IdSemestre,
        id_distrito = @IdDistrito, id_carrera = @IdCarrera, id_campus = @id_campus, id_alumno = @IdAlumno
    WHERE id_matricula = @IdMatricula;
END;
GO
CREATE PROCEDURE EliminarMatricula
    @IdMatricula INT
AS
BEGIN
    UPDATE matricula
    SET vigencia = 'N'
    WHERE id_matricula = @IdMatricula;
END;
GO

CREATE PROCEDURE ObtenerMatriculaPorId
    @IdMatricula INT
AS
BEGIN
    SELECT * FROM matricula WHERE id_matricula = @IdMatricula;
END;
GO


-- Pago
CREATE PROCEDURE InsertarPago 
    @Monto DECIMAL(10,2),
    @FechaLimite DATE,
    @MetodoPago NVARCHAR(50)
AS
BEGIN
    INSERT INTO pago ( monto, fecha_limite, metodo_pago)
    VALUES ( @Monto, @FechaLimite, @MetodoPago);
END;
GO

CREATE PROCEDURE ActualizarPago
    @IdPago INT, 
    @Monto DECIMAL(10,2),
    @FechaLimite DATE,
    @MetodoPago NVARCHAR(50)
AS
BEGIN
    UPDATE pago
    SET  monto = @Monto, fecha_limite = @FechaLimite, metodo_pago = @MetodoPago
    WHERE id_pago = @IdPago;
END;
GO

CREATE PROCEDURE ObtenerPagoPorId
    @IdPago INT
AS
BEGIN
    SELECT * FROM pago WHERE id_pago = @IdPago;
END;
GO

-- Detalle_Matricula_Pago
CREATE PROCEDURE InsertarDetalleMatriculaPago
    @IdMatricula INT,
    @IdPago INT,
    @MontoPagado DECIMAL(10,2),
    @FechaPago DATE
AS
BEGIN
    INSERT INTO detalle_matricula_pago (id_matricula, id_pago, monto_pagado, fecha_pago)
    VALUES (@IdMatricula, @IdPago, @MontoPagado, @FechaPago);
END;
GO

CREATE PROCEDURE ActualizarDetalleMatriculaPago
    @IdDetalle INT,
    @IdMatricula INT,
    @IdPago INT,
    @MontoPagado DECIMAL(10,2),
    @FechaPago DATE
AS
BEGIN
    UPDATE detalle_matricula_pago
    SET id_matricula = @IdMatricula, id_pago = @IdPago, monto_pagado = @MontoPagado, fecha_pago = @FechaPago
    WHERE id_detalle = @IdDetalle;
END;
GO

CREATE PROCEDURE ObtenerDetalleMatriculaPagoPorId
    @IdDetalle INT
AS
BEGIN
    SELECT * FROM detalle_matricula_pago WHERE id_detalle = @IdDetalle;
END;
GO

-- Grupo
CREATE PROCEDURE InsertarGrupo
    @Denominacion NVARCHAR(50),
    @Matriculados INT
AS
BEGIN
    INSERT INTO grupo (denominacion, matriculados)
    VALUES (@Denominacion, @Matriculados);
END;
GO

CREATE PROCEDURE ActualizarGrupo
    @IdGrupo INT,
    @Denominacion NVARCHAR(50),
    @Matriculados INT
AS
BEGIN
    UPDATE grupo
    SET denominacion = @Denominacion, matriculados = @Matriculados
    WHERE id_grupo = @IdGrupo;
END;
GO

CREATE PROCEDURE EliminarGrupo
    @IdGrupo INT
AS
BEGIN 
    UPDATE grupo SET vigencia = 'N' WHERE id_grupo = @IdGrupo;
  
END;
GO


CREATE PROCEDURE ObtenerGrupoPorId
    @IdGrupo INT
AS
BEGIN
    SELECT * FROM grupo WHERE id_grupo = @IdGrupo;
END;
GO 
 

-- Detalle_Matricula
CREATE PROCEDURE InsertarDetalleMatricula
    @MatriculaId INT,
    @GrupoId INT,
    @Nota INT NULL
AS
BEGIN
    INSERT INTO detalle_matricula (matricula_id, grupo_id, nota)
    VALUES (@MatriculaId, @GrupoId, @Nota);
END;
GO

CREATE PROCEDURE ActualizarDetalleMatricula
    @MatriculaId INT,
    @GrupoId INT,
    @Nota INT NULL
AS
BEGIN
    UPDATE detalle_matricula
    SET nota = @Nota
    WHERE matricula_id = @MatriculaId AND grupo_id = @GrupoId;
END;
GO

-- Curso
CREATE PROCEDURE InsertarCurso
    @Nombre NVARCHAR(50),
    @Descripcion NVARCHAR(100) NULL
AS
BEGIN
    INSERT INTO curso (nombre, descripcion)
    VALUES (@Nombre, @Descripcion);
END;
GO

CREATE PROCEDURE ActualizarCurso
    @IdCurso INT,
    @Nombre NVARCHAR(50),
    @Descripcion NVARCHAR(100) NULL
AS
BEGIN
    UPDATE curso
    SET nombre = @Nombre, descripcion = @Descripcion
    WHERE id_curso = @IdCurso;
END;
GO

CREATE PROCEDURE ObtenerCursoPorId
    @IdCurso INT
AS
BEGIN
    SELECT * FROM curso WHERE id_curso = @IdCurso;
END;
GO


CREATE PROCEDURE EliminarCurso
    @IdCurso INT
AS
BEGIN 
    UPDATE curso 
    SET vigencia = 'N' 
    WHERE id_curso = @IdCurso;
END;
GO  

-- Detalle_Grupo_Curso
CREATE PROCEDURE InsertarDetalleGrupoCurso
    @IdGrupo INT,
    @IdCurso INT
AS
BEGIN
    INSERT INTO detalle_grupo_curso (id_grupo, id_curso)
    VALUES (@IdGrupo, @IdCurso);
END;
GO
 
-- Docente
CREATE PROCEDURE InsertarDocente
    @Nombre NVARCHAR(50),
    @Apellido NVARCHAR(50),
    @DNI CHAR(8),
    @Correo NVARCHAR(50) NULL,
    @Telefono NVARCHAR(9) NULL
AS
BEGIN
    INSERT INTO docente (nombre, apellido, dni, correo, telefono)
    VALUES (@Nombre, @Apellido, @DNI, @Correo, @Telefono);
END;
GO

CREATE PROCEDURE ActualizarDocente
    @IdDocente INT,
    @Nombre NVARCHAR(50),
    @Apellido NVARCHAR(50),
    @DNI CHAR(8),
    @Correo NVARCHAR(50) NULL,
    @Telefono NVARCHAR(9) NULL
AS
BEGIN
    UPDATE docente
    SET nombre = @Nombre, apellido = @Apellido, dni = @DNI, correo = @Correo, telefono = @Telefono
    WHERE id_docente = @IdDocente;
END;
GO

CREATE PROCEDURE EliminarDocente
    @IdDocente INT
AS
BEGIN 
    UPDATE docente 
    SET vigencia = 'N' 
    WHERE id_docente = @IdDocente;
END;
GO

CREATE PROCEDURE ObtenerDocentePorId
    @IdDocente INT
AS
BEGIN
    SELECT * FROM docente WHERE id_docente = @IdDocente;
END;
GO

-- Detalle_Docente_Curso
CREATE PROCEDURE InsertarDetalleDocenteCurso
    @IdDocente INT,
    @IdCurso INT
AS
BEGIN
    INSERT INTO detalle_docente_curso (id_docente, id_curso)
    VALUES (@IdDocente, @IdCurso);
END;
GO

-------------------------------------------------------------------------------------------------------------------------



-- INSERT, UPDATE Y DELETE EN LA TABLA MATRICULA

-- INSERTAR REGISTROS
INSERT INTO matricula (fecha_matricula, vigencia, id_semestre, id_distrito, id_carrera, id_campus, id_alumno)
VALUES 
('2028-08-01', 'V', 12, 12, 12, 12, 12),
('2029-03-01', 'V', 13, 13, 13, 13, 13);


-- UPDATE 

UPDATE matricula
SET id_carrera = 5
WHERE id_matricula = 2;



-- DELETE
UPDATE matricula
SET vigencia = 'N'
WHERE id_matricula = 1; 

UPDATE matricula
SET vigencia = 'N'
WHERE id_matricula = 3;

UPDATE matricula
SET vigencia = 'N'
WHERE id_matricula = 4 



-------------------------------------------------------------------------------------------------------------------------


-- VISTAS DE CONSULTAS CON CONDICIONES
CREATE VIEW Vista_Alumnos_Distrito AS
SELECT * FROM Alumnos WHERE Distrito = 'Lima';

CREATE VIEW Vista_Matriculas_Vigentes AS
SELECT * FROM Matriculas WHERE Estado = 'Vigente';

CREATE VIEW Vista_Sedes_Provincia AS
SELECT * FROM Sedes WHERE Provincia = 'Arequipa';

CREATE VIEW Vista_Docentes_Correo AS
SELECT * FROM Docentes WHERE Correo IS NOT NULL;



-- VISTAS CONSULTAS AGRUPADAS
CREATE VIEW Vista_Alumnos_Por_Carrera AS
SELECT CarreraID, COUNT(*) AS TotalAlumnos FROM Alumnos GROUP BY CarreraID;

CREATE VIEW Vista_Sedes_Departamento AS
SELECT Departamento, COUNT(*) AS TotalSedes FROM Sedes GROUP BY Departamento;

CREATE VIEW Vista_Total_Pagos_Metodo AS
SELECT MetodoPago, SUM(Monto) AS TotalPagado FROM Pagos GROUP BY MetodoPago;

CREATE VIEW Vista_Matriculados_Semestre AS
SELECT Semestre, COUNT(*) AS TotalMatriculados FROM Matriculas GROUP BY Semestre;




-- VISTAS CONSULTAS COMBINADAS
CREATE VIEW Vista_Estudiantes_Docentes AS
SELECT ID, Nombre, Apellido, 'Estudiante' AS Tipo FROM Alumnos
UNION
SELECT ID, Nombre, Apellido, 'Docente' AS Tipo FROM Docentes;

CREATE VIEW Vista_Apellidos_Comunes AS
SELECT Apellido FROM Alumnos
UNION
SELECT Apellido FROM Docentes;

CREATE VIEW Vista_Cursos_Grupos AS
SELECT CursoID, Nombre FROM Cursos WHERE CursoID IN (SELECT DISTINCT CursoID FROM Grupos)
UNION
SELECT GrupoID, Nombre FROM Grupos WHERE GrupoID IN (SELECT DISTINCT GrupoID FROM Matriculas);

CREATE VIEW Vista_Ubicaciones_Sedes AS
SELECT Departamento FROM Sedes
UNION
SELECT Provincia FROM Sedes;



-- VISTAS SUBCONSULTAS
CREATE VIEW Vista_Matriculas_Alumnos AS
SELECT m.MatriculaID, a.Nombre, c.Nombre AS Carrera FROM Matriculas m
JOIN Alumnos a ON m.AlumnoID = a.ID
JOIN Carreras c ON a.CarreraID = c.ID;

CREATE VIEW Vista_Pagos_Alumnos AS
SELECT p.PagoID, a.Nombre, p.Monto FROM Pagos p
JOIN Alumnos a ON p.AlumnoID = a.ID;

CREATE VIEW Vista_Docentes_Cursos AS
SELECT d.Nombre, c.Nombre AS Curso FROM Docentes d
JOIN Cursos c ON d.ID = c.DocenteID;

CREATE VIEW Vista_Grupos_Mas_10 AS
SELECT GrupoID FROM Matriculas
GROUP BY GrupoID HAVING COUNT(*) > 10;

go
--
CREATE ROLE administrador;
CREATE ROLE tecnico;
CREATE ROLE secretario;
CREATE ROLE docente;
go
-------------------------------------------------------------------------------------------------------------------------


ALTER ROLE db_owner ADD MEMBER administrador;
 

GRANT SELECT, INSERT, UPDATE ON matricula to tecnico
GRANT SELECT, INSERT, UPDATE ON detalle_matricula to tecnico
GRANT SELECT, INSERT, UPDATE ON grupo to tecnico
GRANT SELECT, INSERT, UPDATE ON detalle_grupo_curso to tecnico
GRANT SELECT, INSERT, UPDATE ON curso to tecnico
GRANT SELECT, INSERT, UPDATE ON detalle_docente_curso to tecnico
GRANT SELECT, INSERT, UPDATE ON docente to tecnico
GRANT SELECT, INSERT, UPDATE ON alumno to tecnico
GRANT SELECT ON pago to tecnico
GRANT SELECT ON detalle_matricula_pago to tecnico
GRANT SELECT, INSERT, UPDATE ON semestre to tecnico
GRANT SELECT, INSERT, UPDATE ON carrera to tecnico
GRANT SELECT, INSERT, UPDATE ON facultad to tecnico
GRANT SELECT, INSERT, UPDATE ON sede to tecnico
GRANT SELECT, INSERT, UPDATE ON distrito to tecnico
GRANT SELECT, INSERT, UPDATE ON provincia to tecnico
GRANT SELECT, INSERT, UPDATE ON departamento to tecnico
GRANT SELECT, INSERT, UPDATE ON campus to tecnico
-- 
GRANT SELECT, INSERT, UPDATE ON matricula to secretario
GRANT SELECT, INSERT, UPDATE ON detalle_matricula to secretario
GRANT SELECT ON grupo to secretario
GRANT SELECT ON detalle_grupo_curso to secretario
GRANT SELECT ON curso to secretario
GRANT SELECT ON detalle_docente_curso to secretario
GRANT SELECT ON docente to secretario
GRANT SELECT, INSERT, UPDATE ON alumno to secretario
GRANT SELECT, INSERT ON pago to secretario
GRANT SELECT, INSERT ON detalle_matricula_pago to secretario
GRANT SELECT ON semestre to secretario
GRANT SELECT ON carrera to secretario
GRANT SELECT ON facultad to secretario
GRANT SELECT ON sede to secretario
GRANT SELECT ON distrito to secretario
GRANT SELECT ON provincia to secretario
GRANT SELECT ON departamento to secretario
GRANT SELECT ON campus to secretario
--
GRANT SELECT ON grupo to docente
GRANT SELECT ON detalle_grupo_curso to docente
GRANT SELECT ON curso to docente
GRANT SELECT ON detalle_docente_curso to docente
GRANT SELECT, UPDATE ON docente to docente  
GRANT SELECT ON semestre to docente
GRANT SELECT ON carrera to docente
GRANT SELECT ON facultad to docente
GRANT SELECT ON sede to docente 
GRANT SELECT ON distrito to tecnico
GRANT SELECT ON provincia to tecnico
GRANT SELECT ON departamento to tecnico
GRANT SELECT ON campus to docente
go 
/*CREATE LOGIN JhonRamirez WITH PASSWORD = 'contraseña';
CREATE LOGIN JuliaGarcia WITH PASSWORD = 'contraseña';
CREATE LOGIN MateoSanchez WITH PASSWORD = 'contraseña';
CREATE LOGIN Martínez WITH PASSWORD = 'contraseña';
CREATE LOGIN RuizRomero WITH PASSWORD = 'contraseña';
CREATE LOGIN GomezCruz WITH PASSWORD = 'contraseña';
CREATE LOGIN FloresRodriguez WITH PASSWORD = 'contraseña';
CREATE LOGIN GonzalezHernandez WITH PASSWORD = 'contraseña';
CREATE LOGIN Lopez WITH PASSWORD = 'contraseña';
CREATE LOGIN Quispe WITH PASSWORD = 'contraseña';
CREATE LOGIN MartínezQuispe WITH PASSWORD = 'contraseña';
CREATE LOGIN Ruiz WITH PASSWORD = 'contraseña';
CREATE LOGIN Gomez WITH PASSWORD = 'contraseña';
CREATE LOGIN Flores WITH PASSWORD = 'contraseña';*/
go 
CREATE USER JhonRamirez FOR LOGIN JhonRamirez;
CREATE USER JuliaGarcia FOR LOGIN JuliaGarcia;
CREATE USER MateoSanchez FOR LOGIN MateoSanchez;
CREATE USER Martínez FOR LOGIN Martínez;
CREATE USER RuizRomero FOR LOGIN RuizRomero;
CREATE USER GomezCruz FOR LOGIN GomezCruz;
CREATE USER FloresRodriguez FOR LOGIN FloresRodriguez;
CREATE USER GonzalezHernandez FOR LOGIN GonzalezHernandez;
CREATE USER Lopez FOR LOGIN Lopez;
CREATE USER Quispe FOR LOGIN Quispe;
CREATE USER MartínezQuispe FOR LOGIN MartínezQuispe;
CREATE USER Ruiz FOR LOGIN Ruiz;
CREATE USER Gomez FOR LOGIN Gomez;
CREATE USER Flores FOR LOGIN Flores;

go 
ALTER ROLE administrador ADD MEMBER JhonRamirez;
ALTER ROLE tecnico ADD MEMBER JuliaGarcia;
ALTER ROLE tecnico ADD MEMBER MateoSanchez;
ALTER ROLE tecnico ADD MEMBER Martínez;
ALTER ROLE tecnico ADD MEMBER RuizRomero;
ALTER ROLE tecnico ADD MEMBER GomezCruz;
ALTER ROLE tecnico ADD MEMBER FloresRodriguez;
ALTER ROLE tecnico ADD MEMBER GonzalezHernandez;
ALTER ROLE tecnico ADD MEMBER Lopez;
ALTER ROLE docente ADD MEMBER Quispe;
ALTER ROLE docente ADD MEMBER MartínezQuispe;
ALTER ROLE docente ADD MEMBER Ruiz;
ALTER ROLE secretario ADD MEMBER Gomez;
ALTER ROLE secretario ADD MEMBER Flores;

go
